name: macos ldc build
on: [push, pull_request]

jobs:
  macos-build:
    name: macos ldc build
    strategy:
      matrix:
        os: [macos-latest]
        dc: [ldc-latest]

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Install D compiler
        uses: dlang-community/setup-dlang@v1
        with:
          compiler: ${{ matrix.dc }}

      - name: Install htslib deps
        run: |
            brew install xz autoconf automake cython wget
      - name: Get htslib version
        id: get-htslib-version
        run: |
            echo "::set-output name=htslib_version::1.13"

      - name: Cache htslib
        id: cache-htslib
        uses: actions/cache@v2
        with:
          path: htslib-${{ steps.get-htslib-version.outputs.htslib_version }}
          key: ${{ runner.os}}-htslib-${{ steps.get-htslib-version.outputs.htslib_version }}

      - name: Build htslib
        if: steps.cache-htslib.outputs.cache-hit != 'true'
        run: |
            wget https://github.com/samtools/htslib/releases/download/${{ steps.get-htslib-version.outputs.htslib_version }}/htslib-${{ steps.get-htslib-version.outputs.htslib_version }}.tar.bz2
            tar -xf htslib-${{ steps.get-htslib-version.outputs.htslib_version }}.tar.bz2
            cd htslib-${{ steps.get-htslib-version.outputs.htslib_version }}
            ./configure
            make

      - name: Install htslib
        run: |
            cd htslib-${{ steps.get-htslib-version.outputs.htslib_version }}
            sudo make install

      - name: Install parasail
        run: |
            wget https://github.com/jeffdaily/parasail/releases/download/v2.4.3/parasail-2.4.3-Darwin-10.13.6.tar.gz
            tar -xf parasail-2.4.3-Darwin-10.13.6.tar.gz
            cd parasail-2.4.3-Darwin-10.13.6/lib
            sudo cp * /usr/local/lib

      - name: Run tests
        run: dub build -b release
        env:
          LIBRARY_PATH: /usr/local/lib
      
      - name: fix binary and compress
        run: |
            install_name_tool -change /usr/local/lib/libhts.3.dylib @rpath/libhts.3.dylib fade
            tar -czvf fade.darwin-amd64.tar.gz fade
      
      - name: upload osx artifact
        uses: actions/upload-artifact@v2
        with:
          name: fade-osx
          path: fade.darwin-amd64.tar.gz

  docker-build-and-release:
    name: release with static linux binary
    needs: macos-build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get the tag
        id: get_version
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3 | sed 's/^v//')

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push fade image
        id: docker_build_fade
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: blachlylab/fade:latest,blachlylab/fade:${{ steps.get_version.outputs.VERSION }}

      - name: extract fade binary
        uses: shrink/actions-docker-extract@v1
        id: extract
        with:
          image: blachlylab/fade:latest
          path: /home/fade/fade
      
      - name: compress binary
        run: tar -czvf fade.many-linux-x86_64.tar.gz ${{ steps.extract.outputs.destination }}/fade

      - name: Download osx binary
        uses: actions/download-artifact@v2
        with:
          name: fade-osx

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: fade.many-linux-x86_64.tar.gz,fade.darwin-amd64.tar.gz
          generate_release_notes: true
          draft: true
